import os
import logging
import asyncio
from datetime import datetime
import shutil
from telethon import TelegramClient, events, Button
from telethon.tl.types import InputMessagesFilterPhotos
from dotenv import load_dotenv
import tempfile
from pathlib import Path
from utils import logger, WITH_TEXT_DIR, WITHOUT_TEXT_DIR
import io
from PIL import Image, ImageDraw, ImageFont
import textwrap
import hashlib
import random
import json
import aiohttp
from enum import Enum, auto

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
# URL –¥–ª—è Ollama API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–æ–∫–∞–ª—å–Ω—ã–π)
OLLAMA_API_URL = os.getenv('OLLAMA_API_URL', 'http://localhost:11434/api/generate')
# –ú–æ–¥–µ–ª—å Ollama (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é phi3)
OLLAMA_MODEL = os.getenv('OLLAMA_MODEL', 'phi3')
# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
BOT_PASSWORD = os.getenv('BOT_PASSWORD', 'admin123')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
bot = TelegramClient('meme_bot_session', API_ID, API_HASH)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ int (—ç—Ç–æ –≤–∞–∂–Ω–æ!)
try:
    API_ID = int(API_ID)
except (ValueError, TypeError):
    logger.error("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

try:
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))
except (ValueError, TypeError):
    logger.error("ADMIN_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if not all([BOT_TOKEN, API_ID, API_HASH, ADMIN_USER_ID]):
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω—ã –∫–æ–Ω–µ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
AWAITING_TOP_TEXT = "awaiting_top_text"  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–≤–µ—Ä—Ö—É
AWAITING_BOTTOM_TEXT = "awaiting_bottom_text"  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–∏–∑—É
AWAITING_AI_THEME = "awaiting_ai_theme"  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–º—ã –¥–ª—è –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
CREATING_AI_MEME = "creating_ai_meme"  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –ò–ò
AWAITING_TEMPLATE_THEME = "awaiting_template_theme"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
AWAITING_PASSWORD = "awaiting_password"  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è

# –¢–µ–º—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–º–æ–≤
TEMPLATE_THEMES = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†–∞–±–æ—Ç–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", 
    "–ï–¥–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–°–ø–æ—Ä—Ç",
    "–£—á–µ–±–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
]

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º
THEME_EMOJI = {
    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üíª",
    "—Ä–∞–±–æ—Ç–∞": "üíº",
    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "üåê",
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": "‚ù§Ô∏è",
    "–µ–¥–∞": "üçî",
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "üì±",
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": "üê±",
    "—Å–ø–æ—Ä—Ç": "üèÉ",
    "—É—á–µ–±–∞": "üìö",
    "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã
def get_emoji_for_theme(theme):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º—ã —à–∞–±–ª–æ–Ω–∞"""
    return THEME_EMOJI.get(theme.lower(), "üìù")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç—ã –∏ —Ç.–¥.)
user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authenticated_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {
    'current_category': None,  # 'with_text' –∏–ª–∏ 'without_text'
    'current_index': 0,
    'images': []
}

# –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–æ–≤
DEFAULT_MEME_THEMES = [
    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ—Ñ–∏—Å–Ω–∞—è –∂–∏–∑–Ω—å", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", 
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ø—è—Ç–Ω–∏—Ü–∞", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "—Ä–∞–±–æ—Ç–∞ –∏–∑ –¥–æ–º–∞", 
    "—Å–æ–≤–µ—â–∞–Ω–∏—è", "–¥–µ–¥–ª–∞–π–Ω—ã", "–∫–æ—Ñ–µ", "–≤—ã—Ö–æ–¥–Ω—ã–µ", "–æ—Ç–ø—É—Å–∫", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", 
    "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—à–∫–æ–ª–∞", "–¥—Ä—É–∑—å—è", "—Å–µ–º–µ–π–Ω–∞—è –∂–∏–∑–Ω—å", "—Å–ø–æ—Ä—Ç", "–µ–¥–∞",
    "—Ñ–∏—Ç–Ω–µ—Å", "—Å–æ–Ω", "–ø–æ–≥–æ–¥–∞", "—É–±–æ—Ä–∫–∞", "—à–æ–ø–ø–∏–Ω–≥", "—Ñ–∏–ª—å–º—ã", "–∏–≥—Ä—ã",
    "–∫–Ω–∏–≥–∏", "–º—É–∑—ã–∫–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∂–∏–≤–æ—Ç–Ω—ã–µ",
    "–ø–æ–ª–∏—Ç–∏–∫–∞", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–Ω–∞—É–∫–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–∫–æ—Å–º–æ—Å"
]

class UserState(Enum):
    IDLE = auto()
    AWAITING_TOP_TEXT = auto()
    AWAITING_BOTTOM_TEXT = auto()
    AWAITING_AI_THEME = auto()
    AWAITING_TEMPLATE_THEME = auto()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã

async def generate_meme_text(theme=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –ò–ò –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama API
    
    Args:
        theme: —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        
    Returns:
        tuple: (–≤–µ—Ä—Ö–Ω–∏–π_—Ç–µ–∫—Å—Ç, –Ω–∏–∂–Ω–∏–π_—Ç–µ–∫—Å—Ç)
    """
    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
    if not theme:
        theme = random.choice(DEFAULT_MEME_THEMES)
        
    try:
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        prompt = f"""–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Å–º–µ—à–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞ –Ω–∞ —Ç–µ–º—É "{theme}".
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ:
        –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: [—Ç–µ–∫—Å—Ç]
        –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: [—Ç–µ–∫—Å—Ç]
        
        –í–∞–∂–Ω–æ:
        - –í–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (1-5 —Å–ª–æ–≤)
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –º–µ–º–∞: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –Ω–∏–∂–Ω–∏–π - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é
        - –ë—É–¥—å –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º –∏ —Å–º–µ—à–Ω—ã–º
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏, —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        """
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama API
        async with aiohttp.ClientSession() as session:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama API
                async with session.post(
                    OLLAMA_API_URL,
                    json={
                        "model": OLLAMA_MODEL,
                        "prompt": prompt,
                        "stream": False
                    },
                    timeout=aiohttp.ClientTimeout(total=30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        ai_response = result.get("response", "").strip()
                        logger.info(f"–û—Ç–≤–µ—Ç –ò–ò: {ai_response}")
                    else:
                        err_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API Ollama: {response.status}, {err_text}")
                        return (f"–ö–æ–≥–¥–∞ –ø—ã—Ç–∞–µ—à—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", f"–ò–ò –¥–ª—è –º–µ–º–∞ –ø—Ä–æ {theme}")
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
                return get_fallback_meme_text(theme)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        top_text = ""
        bottom_text = ""
        
        for line in ai_response.split('\n'):
            line = line.strip()
            if line.lower().startswith("–≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç:"):
                top_text = line[line.find(':')+1:].strip()
            elif line.lower().startswith("–Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç:"):
                bottom_text = line[line.find(':')+1:].strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if not top_text or not bottom_text:
            return get_fallback_meme_text(theme)
        
        return (top_text, bottom_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–º–∞: {e}")
        return get_fallback_meme_text(theme)

def get_fallback_meme_text(theme):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –º–µ–º–æ–≤, –∫–æ–≥–¥–∞ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    Args:
        theme: —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
    Returns:
        tuple: (–≤–µ—Ä—Ö–Ω–∏–π_—Ç–µ–∫—Å—Ç, –Ω–∏–∂–Ω–∏–π_—Ç–µ–∫—Å—Ç)
    """
    # –°–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    templates = {
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [
            ("–ö–æ–≥–¥–∞ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ê —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –ø–æ—á–µ–º—É"),
            ("–ù–∞–ø–∏—Å–∞–ª 300 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞", "–ó–∞–±—ã–ª —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π"),
            ("–ö–æ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –ª–æ–∫–∞–ª—å–Ω–æ", "–ò –∑–∞–ø—É—Å—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥–µ"),
            ("–î—É–º–∞–ª —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –±–∞–≥", "–ê –ø–æ—Ç—Ä–∞—Ç–∏–ª —Ç—Ä–∏ –¥–Ω—è"),
            ("–ö–æ–≥–¥–∞ –∫–æ–ª–ª–µ–≥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ–π –∫–æ–¥"),
            ("–ö–æ–≥–¥–∞ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ Stack Overflow", "–ò –æ–Ω –Ω–∞ 10 –ª–µ—Ç —Å—Ç–∞—Ä—à–µ"),
            ("–ö–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Å–≤–æ–µ–º –∫–æ–¥–µ", "–ß—Ç–æ —è –≤–æ–æ–±—â–µ –Ω–∞–ø–∏—Å–∞–ª"),
            ("–ö–æ–≥–¥–∞ —Å–ª–æ–º–∞–ª –ø—Ä–æ–¥–∞–∫—à–µ–Ω", "–≠—Ç–æ –Ω–µ —è, —ç—Ç–æ –î–∂–µ–Ω–∫–∏–Ω—Å"),
            ("–í—Ä–µ–º—è –¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç", "git commit -m 'it works'"),
            ("–ö–æ–≥–¥–∞ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑", "–≠—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"),
        ],
        "—Ä–∞–±–æ—Ç–∞": [
            ("–ü—è—Ç–Ω–∏—Ü–∞, 17:55", "–ù–æ–≤–∞—è –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞"),
            ("–ö–æ–≥–¥–∞ –±–æ—Å—Å –≥–æ–≤–æ—Ä–∏—Ç", "–ó–∞–¥–µ—Ä–∂–∏—Å—å –Ω–µ–Ω–∞–¥–æ–ª–≥–æ"),
            ("–ö–æ–≥–¥–∞ –Ω–∞–∫–æ–Ω–µ—Ü –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–æ–µ–∫—Ç", "–ê –∑–∞–∫–∞–∑—á–∏–∫ –º–µ–Ω—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"),
            ("–ü–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å", "VS –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—É—Å–∫–æ–º"),
            ("–ö–æ–≥–¥–∞ –æ–ø–∞–∑–¥—ã–≤–∞–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç—É", "–ò –≤–∏–¥–∏—à—å, —á—Ç–æ –±–æ—Å—Å —Ç–æ–∂–µ –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç"),
            ("–ö–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å —á—Ç–æ –±–æ–ª–µ–Ω", "–ò —Å–ª—É—á–∞–π–Ω–æ –ª–∞–π–∫–∞–µ—à—å –ø–æ—Å—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"),
            ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ vs –ü—è—Ç–Ω–∏—Ü–∞", "–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫, —Ä–∞–∑–Ω—ã–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ"),
            ("–ö–æ–≥–¥–∞ —É—Ç—Ä–æ–º –Ω–∞–∂–∏–º–∞–µ—à—å '–æ—Ç–ª–æ–∂–∏—Ç—å'", "–ò –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞"),
            ("–ö–æ–≥–¥–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É", "–Ø –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä?"),
            ("–ö–æ–≥–¥–∞ –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–∏ –≥–æ–≤–æ—Ä—è—Ç —Ç–≤–æ–µ –∏–º—è", "–ò —Ç—ã –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—à—å—Å—è, —á—Ç–æ —Å–ª—É—à–∞–ª"),
        ],
        "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": [
            ("–ö–æ–≥–¥–∞ –≤–≤–æ–¥–∏—à—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å", "–í –ø—è—Ç—ã–π —Ä–∞–∑"),
            ("–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ —Ä–µ–∫–ª–∞–º–µ", "–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–æ–º–∞"),
            ("–ù–∞–∂–∏–º–∞–µ—à—å '–Ω–µ —Å–µ–π—á–∞—Å'", "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"),
            ("–ö–æ–≥–¥–∞ Wi-Fi –ø—Ä–æ–ø–∞–¥–∞–µ—Ç", "–ù–∞ —Å–∞–º–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º –º–µ—Å—Ç–µ"),
            ("–û–±–µ—â–∞–ª–∏ –æ–ø—Ç–æ–≤–æ–ª–æ–∫–Ω–æ", "–ê –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –∫–∞–∫ –≤—Å–µ–≥–¥–∞"),
            ("–ö–æ–≥–¥–∞ –ø—ã—Ç–∞–µ—à—å—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –≤ HD", "–ü—Ä–∏ –ø–ª–æ—Ö–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"),
            ("'–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–∑–ª–æ–º–∞–Ω!'", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"),
            ("–ö–æ–≥–¥–∞ —Å–∞–π—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è", "F5 F5 F5 F5 F5"),
            ("'–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç'", "–ó–∞–≥—Ä—É–∑–∫–∞ 27%..."),
            ("–ö–æ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω", "–ù–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"),
        ],
        "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": [
            ("–ö–æ–≥–¥–∞ –æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç '–≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ'", "–Ø —á—É–≤—Å—Ç–≤—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
            ("–Ø: —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–û–Ω–∞: *—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∂–∏–∑–Ω—å –∑–∞ 2 —á–∞—Å–∞*"),
            ("–ö–æ–≥–¥–∞ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ñ–∏–ª—å–º", "–£–∂–µ 2 —á–∞—Å–∞"),
            ("–ö–æ–≥–¥–∞ —É—Å–ª—ã—à–∞–ª –∏–º—è –±—ã–≤—à–µ–π", "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–µ —Ñ–ª–µ—à–±–µ–∫–∏"),
            ("–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ vs –¥–µ—Å—è—Ç–æ–µ", "–ö–∞–∫ –º–µ–Ω—è–ª–∞—Å—å –º–æ—è –æ–¥–µ–∂–¥–∞"),
            ("–ö–æ–≥–¥–∞ –ø–∏—à–µ—à—å '–∞—Ö–∞—Ö'", "–ù–æ –¥–∞–∂–µ –Ω–µ —É–ª—ã–±–∞–µ—à—å—Å—è"),
            ("SMS: '–ù–∞–º –Ω—É–∂–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å'", "–ü–µ—Ä–µ–±–∏—Ä–∞—é –≤—Å–µ –≥—Ä–µ—Ö–∏ –∑–∞ –∂–∏–∑–Ω—å"),
            ("–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–≤–æ–µ –∏–º—è –≤ —Ç–æ–ª–ø–µ", "–†–µ–∂–∏–º —à–ø–∏–æ–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"),
        ],
        "–µ–¥–∞": [
            ("–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–∏—à—å –ø–æ —Ä–µ—Ü–µ–ø—Ç—É", "VS –ö–æ–≥–¥–∞ —ç—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è"),
            ("–ß—Ç–æ —è –∑–∞–∫–∞–∑—ã–≤–∞—é –æ–Ω–ª–∞–π–Ω", "–ß—Ç–æ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç"),
            ("–ü–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã", "–î–µ—Å—è—Ç—ã–π –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã"),
            ("–Ø –Ω–∞ –¥–∏–µ—Ç–µ", "*–ó–∞–≥–ª—è–¥—ã–≤–∞–µ—Ç –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç*"),
            ("–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ—Ç–æ–≤–∏—Ç—å", "–ò –≤–µ—Å—å –Ω–∞ –∫—É—Ö–Ω–µ –±–∞—Ä–¥–∞–∫"),
            ("–ß—Ç–æ —è –µ–º –Ω–∞ –ª—é–¥—è—Ö", "–ß—Ç–æ —è –µ–º –æ–¥–∏–Ω –¥–æ–º–∞ –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏"),
            ("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Ü–∞–º '—Å–¥–µ–ª–∞–µ–º —Å–∞–ª–∞—Ç'", "*–ö–∏–¥–∞–µ—Ç –ø–æ–º–∏–¥–æ—Ä –Ω–∞ —Ç–∞—Ä–µ–ª–∫—É*"),
            ("–ú–æ–∏ –ø–ª–∞–Ω—ã –Ω–∞ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "–Ø –≤ 2 —á–∞—Å–∞ –Ω–æ—á–∏"),
        ],
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
            ("–ù–æ–≤—ã–π –∞–π—Ñ–æ–Ω", "–ú–æ—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"),
            ("–ß—Ç–æ —è —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å", "–ß—Ç–æ —è –º–æ–≥—É —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å"),
            ("–Ø: –º–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä —Ç–æ—Ä–º–æ–∑–∏—Ç", "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: –ø—Ä–æ–±–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å?"),
            ("–ö–æ–≥–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞–¥–∞–µ—Ç —ç–∫—Ä–∞–Ω–æ–º –≤–Ω–∏–∑", "–ú–æ–∑–≥: –≥–æ—Ç–æ–≤—å—Å—è –∫ —Ö—É–¥—à–µ–º—É"),
            ("64 –ì–ë –ø–∞–º—è—Ç–∏", "2000 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–æ–µ–π —Å–æ–±–∞–∫–∏"),
            ("–ó–∞—Ä—è–¥ 1%", "–î–µ—Ä–∂–∏—Ç—Å—è –µ—â–µ 2 —á–∞—Å–∞"),
            ("–ó–∞—Ä—è–¥ 20%", "–í—ã–∫–ª—é—á–∞–µ—Ç—Å—è –≤–Ω–µ–∑–∞–ø–Ω–æ"),
            ("–ò—Å–ø–æ–ª—å–∑—É—é 10 –ø–∞—Ä–æ–ª–µ–π", "–ò –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–±—ã–≤–∞—é"),
        ],
        "–∂–∏–≤–æ—Ç–Ω—ã–µ": [
            ("–ö–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –ø—Å—É '–∫—Ç–æ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫'", "–ê –æ–Ω –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫"),
            ("–ö–æ—Ç –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏", "*–ó–≤—É–∫–∏ —Ö–∞–æ—Å–∞*"),
            ("–ß—Ç–æ —è –≤–∏–∂—É", "–ß—Ç–æ –≤–∏–¥–∏—Ç –∫–æ—Ç"),
            ("–°–æ–±–∞–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—É–ª–∫–∏", "VS –°–æ–±–∞–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –¥–æ–º–∞"),
            ("–ö–æ–≥–¥–∞ –ø—ã—Ç–∞–µ—à—å—Å—è —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞", "–ê –æ–Ω –≤—Å–µ –≤—Ä–µ–º—è –¥–≤–∏–≥–∞–µ—Ç—Å—è"),
            ("–ö–æ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ú–æ–π –∫–æ—Ç"),
            ("–Ø: –Ω–µ –±—É–¥—É –∑–∞–≤–æ–¥–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", "–Ø —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: —ç—Ç–æ –º–æ–π —Å—ã–Ω–æ—á–µ–∫"),
            ("–ö–æ–≥–¥–∞ –∫–æ—Ç —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç–µ–Ω—É", "–ß—Ç–æ –æ–Ω —Ç–∞–º –≤–∏–¥–∏—Ç?"),
        ],
        "—Å–ø–æ—Ä—Ç": [
            ("–Ø –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ", "–Ø –ø–æ—Å–ª–µ —Å–ø–æ—Ä—Ç–∑–∞–ª–∞"),
            ("–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∫–µ", "–°–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–æ"),
            ("–ú–æ–∏ –ø–ª–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–µ–∂–∫—É", "–ü–æ–≥–æ–¥–∞: *–∏–¥–µ—Ç –¥–æ–∂–¥—å*"),
            ("–ß—Ç–æ —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é", "–ö–∞–∫ –≤—ã–≥–ª—è–∂—É –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ"),
            ("–ú–æ–µ –ª–∏—Ü–æ –Ω–∞ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ", "–ú–æ–µ —Å–µ—Ä–¥—Ü–µ –Ω–∞ –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ"),
            ("–î–æ –æ—Ç–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è", "*–ë–µ—à–µ–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*"),
            ("–ö—É–ø–∏–ª –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –≥–æ–¥", "–ë—ã–ª –≤ –∑–∞–ª–µ 3 —Ä–∞–∑–∞"),
            ("–Ø –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ö–∞–∂–µ—Ç—Å—è —è —É–∂–µ –≤ —Ñ–æ—Ä–º–µ"),
        ],
        "—É—á–µ–±–∞": [
            ("–Ø –≤–æ –≤—Ä–µ–º—è –ª–µ–∫—Ü–∏–∏", "–Ø –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ"),
            ("–ù–∞—á–∞–ª–æ —Å–µ–º–µ—Å—Ç—Ä–∞", "–ö–æ–Ω–µ—Ü —Å–µ–º–µ—Å—Ç—Ä–∞"),
            ("–ó–∞–¥–∞–Ω–∏–µ: 2000 —Å–ª–æ–≤", "–Ø –Ω–∞ 1999 —Å–ª–æ–≤–µ"),
            ("–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü", "–î–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞"),
            ("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –Ω–µ —Å–ø–∏—Å—ã–≤–∞–π—Ç–µ", "–°—Ç—É–¥–µ–Ω—Ç—ã: *—Å–º–æ—Ç—Ä—è—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞*"),
            ("–Ø –Ω–∞ —É—Ä–æ–∫–µ", "–ú–æ–∏ –º—ã—Å–ª–∏ –Ω–∞ —É—Ä–æ–∫–µ"),
            ("–¶–µ–ª—ã–π —Å–µ–º–µ—Å—Ç—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", "–£—á—É –≤—Å—ë –∑–∞ –Ω–æ—á—å –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞"),
            ("–ö–æ–≥–¥–∞ —É—á–∏—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ", "–ú–æ–π –º–æ–∑–≥: –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ... –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª"),
        ],
        "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": [
            ("–ú–æ–∏ –ø–ª–∞–Ω—ã –Ω–∞ –æ—Ç–ø—É—Å–∫", "–ú–æ–π –±—é–¥–∂–µ—Ç"),
            ("–§–æ—Ç–æ –æ—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ", "–û—Ç–µ–ª—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"),
            ("–Ø —Å–æ–±–∏—Ä–∞—é—Å—å", "VS –ú–æ—è –º–∞–º–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ–Ω—è"),
            ("–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º", "–ê –ø–æ—Ç–æ–º –¥—É–º–∞–µ—à—å, —á—Ç–æ –∑–∞–±—ã–ª –ø–∞—Å–ø–æ—Ä—Ç"),
            ("–í—ã–µ–∑–∂–∞–µ–º –Ω–∞ –æ—Ç–¥—ã—Ö", "–ü—Ä–æ–±–∫–∞ –Ω–∞ —Ç—Ä–∞—Å—Å–µ"),
            ("–Ø –ø–æ—Å–ª–µ 12-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–ª–µ—Ç–∞", "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∏–∫: —É–ª—ã–±–Ω–∏—Ç–µ—Å—å –¥–ª—è —Ñ–æ—Ç–æ"),
            ("–ü–ª–∞–Ω—ã –Ω–∞ –æ—Ç–ø—É—Å–∫", "–ü–æ–≥–æ–¥–∞: *—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —à—Ç–æ—Ä–º*"),
            ("–ß–µ–º–æ–¥–∞–Ω –ø—Ä–∏ –æ—Ç—ä–µ–∑–¥–µ", "–ß–µ–º–æ–¥–∞–Ω –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏"),
        ]
    }
    
    # –î–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ –±–ª–∏–∑–∫–æ–π –∫ –Ω–µ–π
    for key in templates:
        if key.lower() in theme.lower() or theme.lower() in key.lower():
            return random.choice(templates[key])
    
    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for key in templates:
        for word in theme.lower().split():
            if word in key.lower() or key.lower() in word:
                return random.choice(templates[key])
    
    # –î–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    random_category = random.choice(list(templates.keys()))
    
    # –ï—Å–ª–∏ —Ç–µ–º–∞ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö, —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —à–∞–±–ª–æ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π
    if theme:
        generic_templates = [
            (f"–ö–æ–≥–¥–∞ –≥–æ–≤–æ—Ä—è—Ç –ø—Ä–æ {theme}", "–ê —Ç—ã –ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ–µ—à—å —á—Ç–æ —ç—Ç–æ"),
            (f"–Ø –∏ –º–æ–π {theme}", "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞"),
            (f"–ù–∏–∫—Ç–æ: ...", f"–Ø: *—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –≤—Å–µ–º –ø—Ä–æ {theme}*"),
            (f"–ö–æ–≥–¥–∞ –Ω–∞–∫–æ–Ω–µ—Ü –∫—É–ø–∏–ª {theme}", "–ò –æ–Ω —Å—Ä–∞–∑—É –ø–æ–¥–µ—à–µ–≤–µ–ª"),
            (f"{theme} –≤ —Ä–µ–∫–ª–∞–º–µ", f"{theme} –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"),
            (f"–ö–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ —É—Å–ª—ã—à–∞–ª –ø—Ä–æ {theme}", "VS –°–µ–π—á–∞—Å"),
            (f"–ú–æ–∏ –∑–Ω–∞–Ω–∏—è –æ {theme}", "–í–æ–ø—Ä–æ—Å—ã –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ"),
            (f"–ú–æ–π –¥—Ä—É–≥: {theme} - —ç—Ç–æ –ª–µ–≥–∫–æ", "–Ø –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç"),
        ]
        return random.choice(generic_templates)
    
    return random.choice(templates[random_category])

async def load_images():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –æ–±–æ–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    with_text_images = list(WITH_TEXT_DIR.glob('*.jpg'))
    without_text_images = list(WITHOUT_TEXT_DIR.glob('*.jpg'))
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º: {len(with_text_images)}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: {len(without_text_images)}")
    
    return {
        'with_text': with_text_images,
        'without_text': without_text_images
    }

async def send_current_image(event, new_message=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    Args:
        event: Telegram event
        new_message: –ï—Å–ª–∏ True, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∏–Ω–¥–µ–∫—Å
    category = user_state['current_category']
    index = user_state['current_index']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if not user_state['images'][category]:
        if new_message:
            await event.respond("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        else:
            await event.edit("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    current_image = user_state['images'][category][index]
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    total_images = len(user_state['images'][category])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [
            Button.inline("‚¨ÖÔ∏è", data="prev"),
            Button.inline(f"{index + 1} / {total_images}", data="count"),
            Button.inline("‚û°Ô∏è", data="next")
        ],
        [
            Button.inline("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", data="delete"),
            Button.inline("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", data="move"),
        ],
        [
            Button.inline("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ–º", data="create_meme"),
            Button.inline("üé≠ –®–∞–±–ª–æ–Ω—ã", data="template_meme"),
        ],
        [
            Button.inline("ü§ñ –ò–ò + –¢–µ–º–∞", data="create_meme_ai_theme"),
            Button.inline("üß† –ò–ò –ê–≤—Ç–æ–º–∞—Ç", data="create_meme_ai_auto"),
        ],
        [
            Button.inline("üìã –ú–µ–Ω—é", data="menu")
        ]
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞ (—á–∞—Å—Ç—å –ø—É—Ç–∏) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∏
    file_name = current_image.name  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ Path
    file_hash = file_name.split('.')[0][:8]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    caption = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüî¢ {index + 1} –∏–∑ {total_images}\nüÜî {file_hash}"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        user_id = event.sender_id
        chat_id = event.chat_id
        
        # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not new_message:
            try:
                await event.delete()
            except Exception as delete_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        sent_message = await bot.send_file(
            chat_id,
            file=str(current_image),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ —Å—Ç—Ä–æ–∫—É
            caption=caption,
            buttons=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
        user_data['current_image'] = current_image
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)[:50]}..."
        try:
            await bot.send_message(event.chat_id, error_message)
        except Exception as msg_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}")

async def create_meme_button_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –º–µ–º"
    """
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_state['images'] or user_state['images'][user_id] is None:
        await event.respond("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['current_image'] = user_state['images'][user_id][user_state['current_index']]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    user_states[user_id] = AWAITING_TOP_TEXT
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
    await event.respond("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω –°–í–ï–†–•–£ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

@bot.on(events.NewMessage(func=lambda e: e.is_private))
async def text_message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞"""
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await event.respond("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    message_text = event.raw_text
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
    if user_id in user_states and user_states[user_id] == AWAITING_PASSWORD:
        if message_text == BOT_PASSWORD:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
            authenticated_users.add(user_id)
            user_states.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
            
            await event.respond(
                "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n"
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä:",
                buttons=[
                    [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                    [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")],
                    [Button.inline("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", data="reload_images")]
                ]
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è")
        else:
            # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message_text.startswith('/'):
        if message_text == '/cancel' and user_id in user_states:
            if user_states[user_id] == AWAITING_PASSWORD:
                await event.respond("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                await event.respond("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            del user_states[user_id]
            if user_id in user_data:
                user_data[user_id] = {}
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    if user_id in user_states:
        state = user_states[user_id]
        
        if state == AWAITING_TOP_TEXT:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            user_data[user_id]['top_text'] = message_text
            
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            user_states[user_id] = AWAITING_BOTTOM_TEXT
            
            # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
            await event.respond("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω –°–ù–ò–ó–£ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
            return
            
        elif state == AWAITING_BOTTOM_TEXT:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            user_data[user_id]['bottom_text'] = message_text
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user_id]
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            image_path = user_data[user_id]['current_image']
            top_text = user_data[user_id]['top_text']
            bottom_text = user_data[user_id]['bottom_text']
            
            await event.respond("üîÑ –°–æ–∑–¥–∞—é –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–º
            meme_path = await create_meme(image_path, top_text, bottom_text)
            
            if meme_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_file(user_id, meme_path, caption="‚úÖ –í–æ—Ç –≤–∞—à –º–µ–º!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                user_state['images'] = await load_images()
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ–º: {meme_path}")
            else:
                await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞.")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id] = {}
            return
            
        elif state == AWAITING_AI_THEME:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
            theme = message_text
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞
            processing_message = await event.respond(f"üß† –ò–ò –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Å–º–µ—à–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É '{theme}'... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
                top_text, bottom_text = await generate_meme_text(theme)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
                await processing_message.edit(f"‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞—é –º–µ–º...")
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                image_path = user_data[user_id]['current_image']
                meme_path = await create_meme(image_path, top_text, bottom_text)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await processing_message.delete()
                
                if meme_path:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ–º
                    await bot.send_file(
                        user_id,
                        file=str(meme_path),
                        caption=f"‚úÖ –ú–µ–º —Å–æ–∑–¥–∞–Ω –ò–ò –ø–æ —Ç–µ–º–µ '{theme}':\n\n–í–µ—Ä—Ö: {top_text}\n–ù–∏–∑: {bottom_text}"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    user_state['images'] = await load_images()
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–∞ —Ç–µ–º—É '{theme}': {meme_path}")
                else:
                    await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞.")
            
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await processing_message.delete()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞ –ø–æ —Ç–µ–º–µ '{theme}': {e}")
                await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {str(e)[:100]}...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id] = {}
            return

async def create_meme(image_path, top_text, bottom_text):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–º, –¥–æ–±–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        top_text: —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É
        bottom_text: —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–Ω–∏–∑—É
        
    Returns:
        str: –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(image_path) as img:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
            img = img.copy()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            width, height = img.size
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            draw = ImageDraw.Draw(img)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏–º–µ—Ä–Ω–æ 1/10 –æ—Ç –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            font_size = int(height / 10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–±—ã–ª–æ 1/15)
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç Impact (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç –º–µ–º–æ–≤)
            try:
                # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —à—Ä–∏—Ñ—Ç—É Impact
                possible_paths = [
                    # Windows –ø—É—Ç–∏
                    "C:\\Windows\\Fonts\\impact.ttf",
                    "C:\\Windows\\Fonts\\Impact.ttf",
                    # Linux –ø—É—Ç–∏
                    "/usr/share/fonts/truetype/msttcorefonts/Impact.ttf",
                    "/usr/share/fonts/TTF/impact.ttf",
                    "/usr/share/fonts/truetype/impact.ttf",
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–∫–∞—á–∞–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
                    "impact.ttf",
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    "C:\\Windows\\Fonts\\arial.ttf",
                    "C:\\Windows\\Fonts\\Arial.ttf",
                    "C:\\Windows\\Fonts\\arialbd.ttf",  # Arial Bold
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                    "/usr/share/fonts/TTF/DejaVuSans-Bold.ttf",
                    "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf",
                ]
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à—Ä–∏—Ñ—Ç
                font_path = None
                for path in possible_paths:
                    if os.path.exists(path):
                        font_path = path
                        break
                
                if font_path:
                    font = ImageFont.truetype(font_path, font_size)
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: {os.path.basename(font_path)}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Impact, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    font = ImageFont.load_default()
                    logger.warning("–®—Ä–∏—Ñ—Ç Impact –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç")
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                font = ImageFont.load_default()
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à—Ä–∏—Ñ—Ç–∞: {e}")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–≤–æ–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            def draw_text_with_outline(text, position, font, fill_color=(255, 255, 255), outline_color=(0, 0, 0), outline_width=3):
                x, y = position
                # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É (—É–≤–µ–ª–∏—á–µ–Ω–∞ —Ç–æ–ª—â–∏–Ω–∞ –¥–æ 3)
                for offset_x in range(-outline_width, outline_width + 1):
                    for offset_y in range(-outline_width, outline_width + 1):
                        draw.text((x + offset_x, y + offset_y), text, font=font, fill=outline_color)
                # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                draw.text((x, y), text, font=font, fill=fill_color)
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            def wrap_text(text, font, max_width):
                lines = []
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                if not text:
                    return lines
                    
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —à–∏—Ä–∏–Ω—É —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≥—Ä—É–±–æ–π –æ—Ü–µ–Ω–∫–∏
                try:
                    avg_char_width = font.getbbox("A")[2]
                except:
                    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π PIL
                    avg_char_width = font.getsize("A")[0]
                
                chars_per_line = max(1, int(max_width / avg_char_width))
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
                words = text.split()
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–∏
                current_line = []
                current_width = 0
                
                for word in words:
                    try:
                        word_width = font.getbbox(word)[2]
                    except:
                        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π PIL
                        word_width = font.getsize(word)[0]
                    
                    if current_width + word_width <= max_width:
                        current_line.append(word)
                        current_width += word_width + avg_char_width  # –î–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–±–µ–ª–∞
                    else:
                        lines.append(" ".join(current_line))
                        current_line = [word]
                        current_width = word_width
                
                if current_line:
                    lines.append(" ".join(current_line))
                
                return lines
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            max_text_width = width * 0.9  # 90% –æ—Ç —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
            top_lines = wrap_text(top_text.upper(), font, max_text_width)
            try:
                top_height = len(top_lines) * (font_size + 5)
            except:
                top_height = 0
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
            bottom_lines = wrap_text(bottom_text.upper(), font, max_text_width)
            try:
                bottom_height = len(bottom_lines) * (font_size + 5)
            except:
                bottom_height = 0
            
            # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
            y_position = 10  # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            for line in top_lines:
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                try:
                    text_width = font.getbbox(line)[2]
                except:
                    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π PIL
                    text_width = font.getsize(line)[0]
                
                x_position = (width - text_width) // 2
                draw_text_with_outline(line, (x_position, y_position), font)
                y_position += font_size + 5  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
            
            # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
            y_position = height - bottom_height - 10  # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
            for line in bottom_lines:
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                try:
                    text_width = font.getbbox(line)[2]
                except:
                    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π PIL
                    text_width = font.getsize(line)[0]
                
                x_position = (width - text_width) // 2
                draw_text_with_outline(line, (x_position, y_position), font)
                y_position += font_size + 5  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
            hash_input = f"{str(image_path)}_{top_text}_{bottom_text}_{timestamp}"
            hash_value = hashlib.md5(hash_input.encode()).hexdigest()
            filename = f"meme_{hash_value}.jpg"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–º–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            meme_dir = WITH_TEXT_DIR  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–º–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
            os.makedirs(meme_dir, exist_ok=True)
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_path = os.path.join(meme_dir, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img.save(output_path, "JPEG")
            
            return output_path
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {e}")
        return None

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –º–µ–º"
def get_image_keyboard(image_index, total_images, category):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    """
    keyboard = [
        [
            Button.inline("‚¨ÖÔ∏è –ü—Ä–µ–¥.", f"prev_{category}"),
            Button.inline("–°–ª–µ–¥. ‚û°Ô∏è", f"next_{category}")
        ],
        [
            Button.inline("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", f"delete"),
            Button.inline("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", f"move"),
        ],
        [
            Button.inline("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ–º", f"create_meme")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ],
        [
            Button.inline("üìã –ú–µ–Ω—é", data="menu")
        ]
    ]
    
    return keyboard

def register_handlers():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.add_event_handler(
        start_handler,
        events.NewMessage(pattern='/start')
    )
    
    bot.add_event_handler(
        logout_handler,
        events.NewMessage(pattern='/logout')
    )
    
    bot.add_event_handler(
        help_handler,
        events.NewMessage(pattern='/help')
    )
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
    bot.add_event_handler(
        callback_handler,
        events.CallbackQuery()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    bot.add_event_handler(
        create_meme_button_handler,
        events.CallbackQuery(pattern=r"create_meme$")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–æ–≤
    bot.add_event_handler(
        create_meme_ai_theme_handler,
        events.CallbackQuery(pattern=r"create_meme_ai_theme")
    )
    
    bot.add_event_handler(
        create_meme_ai_auto_handler,
        events.CallbackQuery(pattern=r"create_meme_ai_auto")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –º–µ–º–æ–≤
    bot.add_event_handler(
        template_meme_handler,
        events.CallbackQuery(pattern=r"template_meme$")
    )
    
    bot.add_event_handler(
        back_to_meme_menu_handler,
        events.CallbackQuery(pattern=r"back_to_meme_menu$")
    )
    
    bot.add_event_handler(
        handle_template_selection,
        events.CallbackQuery(pattern=r"template_")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    bot.add_event_handler(
        text_message_handler,
        events.NewMessage(func=lambda e: e.is_private)
    )

@bot.on(events.CallbackQuery(pattern=r"template_meme"))
async def template_meme_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if not user_state['current_category']:
        await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    category = user_state['current_category']
    index = user_state['current_index']
    
    if not user_state['images'][category] or len(user_state['images'][category]) == 0:
        await event.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        return
        
    current_image = user_state['images'][category][index]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–º–∞
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['current_image_for_meme'] = current_image
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await event.answer()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —à–∞–±–ª–æ–Ω–∞
    buttons = [
        [Button.inline(f"{get_emoji_for_theme(theme)} {theme}", data=f"template_{theme.lower()}") 
         for theme in TEMPLATE_THEMES[i:i+2]] 
        for i in range(0, len(TEMPLATE_THEMES), 2)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"
    buttons.append([Button.inline("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞", data="template_random")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    buttons.append([Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    await event.edit("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –º–µ–º–∞:", buttons=buttons)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = AWAITING_TEMPLATE_THEME

@bot.on(events.CallbackQuery(pattern=r"back_to_meme_menu"))
async def back_to_meme_menu_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    """
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_states:
        user_states[user_id] = None
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ event.edit –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –º–µ–¥–∏–∞
        await event.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    await send_current_image(event, new_message=True)

@bot.on(events.CallbackQuery(pattern=r"template_"))
async def handle_template_selection(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –º–µ–º–∞
    """
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or user_states[user_id] != AWAITING_TEMPLATE_THEME:
        await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –ø–æ —à–∞–±–ª–æ–Ω—É")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    data = event.data.decode('utf-8')
    category = data.split("_")[1]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await event.answer(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {category}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å
    await event.edit(f"‚è≥ –°–æ–∑–¥–∞–µ–º –º–µ–º —Å —Ç–µ–º–æ–π '{category}'...")
    
    try:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞
        if category == "random":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
            category = random.choice([theme.lower() for theme in TEMPLATE_THEMES])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞
        top_text, bottom_text = get_fallback_meme_text(category)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = user_data[user_id].get('current_image_for_meme')
        if not image_path:
            await event.edit(text="‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –º–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        meme_path = await create_meme(image_path, top_text, bottom_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ–º
        await event.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
        
        await bot.send_file(
            user_id,
            file=str(meme_path),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ —Å—Ç—Ä–æ–∫—É
            caption=f"‚úÖ –ú–µ–º —Å–æ–∑–¥–∞–Ω –ø–æ —à–∞–±–ª–æ–Ω—É —Ç–µ–º—ã '{category}':\n\n–í–µ—Ä—Ö: {top_text}\n–ù–∏–∑: {bottom_text}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        user_state['images'] = await load_images()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = None
        if 'current_image_for_meme' in user_data[user_id]:
            del user_data[user_id]['current_image_for_meme']
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await send_current_image(event, new_message=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: {e}")
        await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {str(e)}", 
        buttons=[
            [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
        ])
        user_states[user_id] = None

@bot.on(events.CallbackQuery(pattern=r"create_meme_ai_theme"))
async def create_meme_ai_theme_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    user_id = event.sender_id
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not user_state['current_category']:
        await event.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    category = user_state['current_category']
    index = user_state['current_index']
    
    if not user_state['images'][category] or len(user_state['images'][category]) == 0:
        await event.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        return
        
    current_image = user_state['images'][category][index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama API
    try:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    OLLAMA_API_URL,
                    json={"model": OLLAMA_MODEL, "prompt": "–ü—Ä–∏–≤–µ—Ç", "stream": False},
                    timeout=aiohttp.ClientTimeout(total=2)  # –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                ) as response:
                    if response.status != 200:
                        # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
                        await event.edit(
                            "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama:",
                            buttons=[
                                [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
                            ]
                        )
                        return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama API: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
                await event.edit(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Ollama. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama:",
                    buttons=[
                        [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                        [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
                    ]
                )
                return
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama API: {e}")
        await event.edit(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã:",
            buttons=[
                [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
            ]
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–º–∞
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['current_image'] = current_image
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    await event.edit(
        "ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò:",
        buttons=[
            [Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="back_to_meme_menu")]
        ]
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = AWAITING_AI_THEME

@bot.on(events.CallbackQuery(pattern=r"create_meme_ai_auto"))
async def create_meme_ai_auto_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò (–±–µ–∑ –≤–≤–æ–¥–∞ —Ç–µ–º—ã)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    user_id = event.sender_id
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not user_state['current_category']:
        await event.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    category = user_state['current_category']
    index = user_state['current_index']
    
    if not user_state['images'][category] or len(user_state['images'][category]) == 0:
        await event.answer("‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        return
        
    current_image = user_state['images'][category][index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama API
    try:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    OLLAMA_API_URL,
                    json={"model": OLLAMA_MODEL, "prompt": "–ü—Ä–∏–≤–µ—Ç", "stream": False},
                    timeout=aiohttp.ClientTimeout(total=2)  # –¢–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                ) as response:
                    if response.status != 200:
                        # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã
                        await event.edit(
                            "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama:",
                            buttons=[
                                [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
                            ]
                        )
                        return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama API: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
                await event.edit(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Ollama. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Ollama:",
                    buttons=[
                        [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                        [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
                    ]
                )
                return
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama API: {e}")
        await event.edit(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã:",
            buttons=[
                [Button.inline("üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", data="template_meme")],
                [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", data="back_to_meme_menu")]
            ]
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–º–∞
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['current_image'] = current_image
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º–µ–º —Å–æ–∑–¥–∞–µ—Ç—Å—è
    await event.edit("‚è≥ –°–æ–∑–¥–∞–µ–º –º–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–º–∞
        top_text, bottom_text = await generate_meme_text()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        meme_path = await create_meme(current_image, top_text, bottom_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ–º
        await event.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        
        await bot.send_file(
            user_id,
            file=str(meme_path),
            caption=f"‚úÖ –ú–µ–º —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò:\n‚Üë {top_text}\n‚Üì {bottom_text}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        user_state['images'] = await load_images()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if 'current_image' in user_data[user_id]:
            del user_data[user_id]['current_image']
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await send_current_image(event, new_message=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞ —Å –ò–ò: {e}")
        await event.edit(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {str(e)}",
            buttons=[
                [Button.inline("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", data="back_to_meme_menu")]
            ]
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = None

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = event.sender_id
    
    if user_id == ADMIN_USER_ID and user_id in authenticated_users:
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–Ω —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        await event.respond(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–º—ã.\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä:",
            buttons=[
                [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")],
                [Button.inline("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", data="reload_images")]
            ]
        )
    elif user_id == ADMIN_USER_ID:
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        await event.respond("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_states[user_id] = AWAITING_PASSWORD
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        await event.respond("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.on(events.NewMessage(pattern='/logout'))
async def logout_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = event.sender_id
    
    if user_id in authenticated_users:
        authenticated_users.remove(user_id)
        await event.respond("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    else:
        await event.respond("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        
@bot.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    user_id = event.sender_id
    
    if user_id != ADMIN_USER_ID or user_id not in authenticated_users:
        await event.respond("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        return
    
    await event.respond(
        "üìö **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "**–ù–∞–≤–∏–≥–∞—Ü–∏—è:**\n"
        "‚¨ÖÔ∏è/‚û°Ô∏è –∫–Ω–æ–ø–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ–º–∞–º–∏\n"
        "üóëÔ∏è - —É–¥–∞–ª–µ–Ω–∏–µ –º–µ–º–∞\n"
        "üîÑ - –ø–µ—Ä–µ–Ω–æ—Å –º–µ–º–∞ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n\n"
        "**–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–æ–≤:**\n"
        "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ–º - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞\n"
        "üé≠ –®–∞–±–ª–æ–Ω—ã - –≤—ã–±–æ—Ä –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —Ç–µ–º–∞–º\n"
        "ü§ñ –ò–ò + –¢–µ–º–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "üß† –ò–ò –ê–≤—Ç–æ–º–∞—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤:**\n"
        "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, üíº –†–∞–±–æ—Ç–∞, üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, ‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è, "
        "üçî –ï–¥–∞, üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, üê± –ñ–∏–≤–æ—Ç–Ω—ã–µ, üèÉ –°–ø–æ—Ä—Ç, üìö –£—á–µ–±–∞, ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–µ–º–æ–≤."
    )

async def callback_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_USER_ID:
        await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in authenticated_users:
        await event.respond("üîí –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
        await event.answer()
        return
    
    data = event.data.decode('utf-8')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {data}")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    if data != "count":
        await event.answer(f"–í—ã–±—Ä–∞–Ω–æ: {data}")
    
    if data == "menu":
        await event.edit(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            buttons=[
                [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")],
                [Button.inline("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", data="reload_images")]
            ]
        )
        
    elif data == "reload_images":
        user_state['images'] = await load_images()
        await event.edit(
            "üîÑ –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–µ–º–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"–° —Ç–µ–∫—Å—Ç–æ–º: {len(user_state['images']['with_text'])}\n"
            f"–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞: {len(user_state['images']['without_text'])}\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            buttons=[
                [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")]
            ]
        )
        
    elif data == "category_with_text":
        user_state['current_category'] = 'with_text'
        user_state['current_index'] = 0
        await send_current_image(event)
        
    elif data == "category_without_text":
        user_state['current_category'] = 'without_text'
        user_state['current_index'] = 0
        await send_current_image(event)
        
    elif data == "next":
        if user_state['current_category']:
            user_state['current_index'] += 1
            # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                user_state['current_index'] = 0
            await send_current_image(event)
        else:
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            
    elif data == "prev":
        if user_state['current_category']:
            user_state['current_index'] -= 1
            # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            if user_state['current_index'] < 0:
                user_state['current_index'] = len(user_state['images'][user_state['current_category']]) - 1
            await send_current_image(event)
        else:
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    
    elif data == "count":
        if user_state['current_category']:
            total = len(user_state['images'][user_state['current_category']])
            await event.answer(f"–ú–µ–º {user_state['current_index'] + 1} –∏–∑ {total}")
        
    elif data == "delete":
        if not user_state['current_category']:
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
            
        images = user_state['images'][user_state['current_category']]
        if not images:
            await event.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        current_image = images[user_state['current_index']]
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            os.remove(current_image)
            await event.answer(f"–ú–µ–º —É–¥–∞–ª–µ–Ω!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            user_state['images'] = await load_images()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º (–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –º–µ–º–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
            if user_state['images'][user_state['current_category']]:
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                    user_state['current_index'] = 0
                await send_current_image(event)
            else:
                await event.edit(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ–º–æ–≤.", buttons=[
                    [Button.inline("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", data="menu")]
                ])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
            await event.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)[:50]}...")
    
    elif data == "move":
        # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not user_state['current_category']:
            await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            return
            
        images = user_state['images'][user_state['current_category']]
        if not images:
            await event.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        current_image = images[user_state['current_index']]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Ç–µ–∫—É—â–µ–π)
        current_dir = WITH_TEXT_DIR if user_state['current_category'] == 'with_text' else WITHOUT_TEXT_DIR
        target_dir = WITHOUT_TEXT_DIR if user_state['current_category'] == 'with_text' else WITH_TEXT_DIR
        target_category = 'without_text' if user_state['current_category'] == 'with_text' else 'with_text'
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            filename = os.path.basename(current_image)
            target_path = target_dir / filename
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
            if target_path.exists():
                base, ext = os.path.splitext(filename)
                target_path = target_dir / f"{base}_moved{ext}"
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(current_image), str(target_path))
            await event.answer(f"–ú–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{target_category}'!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            user_state['images'] = await load_images()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º (–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –º–µ–º–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
            if user_state['images'][user_state['current_category']]:
                # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                    user_state['current_index'] = len(user_state['images'][user_state['current_category']]) - 1
                await send_current_image(event)
            else:
                await event.edit(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ–º–æ–≤.", buttons=[
                    [Button.inline("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", data="menu")]
                ])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
            await event.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {str(e)[:50]}...")

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logger.info(f"–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–º–æ–≤ —Å API_ID={API_ID} –∏ API_HASH={API_HASH[:5]}...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_state['images'] = await load_images()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers()
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.start(bot_token=BOT_TOKEN)
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{(await bot.get_me()).username}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤—É—Ç
        await bot.run_until_disconnected()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.disconnect()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
    asyncio.run(main()) 