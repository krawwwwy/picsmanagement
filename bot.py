import os
import logging
import asyncio
from datetime import datetime
import shutil
from telethon import TelegramClient, events, Button
from telethon.tl.types import InputMessagesFilterPhotos
from dotenv import load_dotenv
import tempfile
from pathlib import Path
from utils import logger, WITH_TEXT_DIR, WITHOUT_TEXT_DIR

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API_ID –≤ int (—ç—Ç–æ –≤–∞–∂–Ω–æ!)
try:
    API_ID = int(API_ID)
except (ValueError, TypeError):
    logger.error("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

try:
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))
except (ValueError, TypeError):
    logger.error("ADMIN_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if not all([BOT_TOKEN, API_ID, API_HASH, ADMIN_USER_ID]):
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {
    'current_category': None,  # 'with_text' –∏–ª–∏ 'without_text'
    'current_index': 0,
    'images': []
}

async def load_images():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –æ–±–æ–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    with_text_images = list(WITH_TEXT_DIR.glob('*.jpg'))
    without_text_images = list(WITHOUT_TEXT_DIR.glob('*.jpg'))
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º: {len(with_text_images)}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: {len(without_text_images)}")
    
    return {
        'with_text': with_text_images,
        'without_text': without_text_images
    }

async def send_current_image(event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    if not user_state['current_category'] or not user_state['images']:
        await event.respond("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return
    
    images = user_state['images'][user_state['current_category']]
    if not images:
        await event.respond(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {user_state['current_category']}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã)
    if user_state['current_index'] >= len(images):
        user_state['current_index'] = 0
    if user_state['current_index'] < 0:
        user_state['current_index'] = len(images) - 1
    
    current_image = images[user_state['current_index']]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = [
        [
            Button.inline("‚¨ÖÔ∏è –ü—Ä–µ–¥.", data="prev"),
            Button.inline(f"{user_state['current_index'] + 1}/{len(images)}", data="count"),
            Button.inline("–°–ª–µ–¥. ‚û°Ô∏è", data="next")
        ],
        [
            Button.inline("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", data="delete"),
            Button.inline("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", data="move"),
            Button.inline("üìã –ú–µ–Ω—é", data="menu")
        ]
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    caption = (f"üñº –ú–µ–º #{user_state['current_index'] + 1}/{len(images)}\n"
               f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {'–° —Ç–µ–∫—Å—Ç–æ–º' if user_state['current_category'] == 'with_text' else '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
               f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {datetime.fromtimestamp(os.path.getctime(current_image)).strftime('%Y-%m-%d')}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º client.send_file –≤–º–µ—Å—Ç–æ event.respond —Å caption
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        await event.delete()
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await event.client.send_file(
        event.chat_id,
        file=str(current_image),
        caption=caption,
        buttons=buttons
    )

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logger.info(f"–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–º–æ–≤ —Å API_ID={API_ID} –∏ API_HASH={API_HASH[:5]}...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    bot = TelegramClient('meme_bot_session', API_ID, API_HASH)
    
    @bot.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        sender = await event.get_sender()
        if sender.id != ADMIN_USER_ID:
            await event.respond("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.respond(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–º—ã.\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä:",
            buttons=[
                [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")],
                [Button.inline("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", data="reload_images")]
            ]
        )
    
    @bot.on(events.NewMessage(pattern='/help'))
    async def help_handler(event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        sender = await event.get_sender()
        if sender.id != ADMIN_USER_ID:
            return
        
        await event.respond(
            "üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–µ–º–æ–≤."
        )
    
    @bot.on(events.CallbackQuery())
    async def callback_handler(event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        sender = await event.get_sender()
        if sender.id != ADMIN_USER_ID:
            await event.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        data = event.data.decode()
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
        if data != "count":
            await event.answer(f"–í—ã–±—Ä–∞–Ω–æ: {data}")
        
        if data == "menu":
            await event.edit(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                buttons=[
                    [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                    [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")],
                    [Button.inline("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", data="reload_images")]
                ]
            )
            
        elif data == "reload_images":
            user_state['images'] = await load_images()
            await event.edit(
                "üîÑ –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–µ–º–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–° —Ç–µ–∫—Å—Ç–æ–º: {len(user_state['images']['with_text'])}\n"
                f"–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞: {len(user_state['images']['without_text'])}\n\n"
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                buttons=[
                    [Button.inline("–° —Ç–µ–∫—Å—Ç–æ–º", data="category_with_text")],
                    [Button.inline("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", data="category_without_text")]
                ]
            )
            
        elif data == "category_with_text":
            user_state['current_category'] = 'with_text'
            user_state['current_index'] = 0
            await send_current_image(event)
            
        elif data == "category_without_text":
            user_state['current_category'] = 'without_text'
            user_state['current_index'] = 0
            await send_current_image(event)
            
        elif data == "next":
            if user_state['current_category']:
                user_state['current_index'] += 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                    user_state['current_index'] = 0
                await send_current_image(event)
            else:
                await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                
        elif data == "prev":
            if user_state['current_category']:
                user_state['current_index'] -= 1
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                if user_state['current_index'] < 0:
                    user_state['current_index'] = len(user_state['images'][user_state['current_category']]) - 1
                await send_current_image(event)
            else:
                await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        
        elif data == "count":
            if user_state['current_category']:
                total = len(user_state['images'][user_state['current_category']])
                await event.answer(f"–ú–µ–º {user_state['current_index'] + 1} –∏–∑ {total}")
            
        elif data == "delete":
            if not user_state['current_category']:
                await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                return
                
            images = user_state['images'][user_state['current_category']]
            if not images:
                await event.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            current_image = images[user_state['current_index']]
            
            try:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                os.remove(current_image)
                await event.answer(f"–ú–µ–º —É–¥–∞–ª–µ–Ω!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                user_state['images'] = await load_images()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º (–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –º–µ–º–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
                if user_state['images'][user_state['current_category']]:
                    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                    if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                        user_state['current_index'] = 0
                    await send_current_image(event)
                else:
                    await event.edit(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ–º–æ–≤.", buttons=[
                        [Button.inline("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", data="menu")]
                    ])
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
                await event.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)[:50]}...")
        
        elif data == "move":
            # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if not user_state['current_category']:
                await event.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                return
                
            images = user_state['images'][user_state['current_category']]
            if not images:
                await event.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            current_image = images[user_state['current_index']]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Ç–µ–∫—É—â–µ–π)
            current_dir = WITH_TEXT_DIR if user_state['current_category'] == 'with_text' else WITHOUT_TEXT_DIR
            target_dir = WITHOUT_TEXT_DIR if user_state['current_category'] == 'with_text' else WITH_TEXT_DIR
            target_category = 'without_text' if user_state['current_category'] == 'with_text' else 'with_text'
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
                filename = os.path.basename(current_image)
                target_path = target_dir / filename
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                if target_path.exists():
                    base, ext = os.path.splitext(filename)
                    target_path = target_dir / f"{base}_moved{ext}"
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                shutil.move(str(current_image), str(target_path))
                await event.answer(f"–ú–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{target_category}'!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                user_state['images'] = await load_images()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º (–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ –º–µ–º–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç)
                if user_state['images'][user_state['current_category']]:
                    # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–ø–µ—Ä—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                    if user_state['current_index'] >= len(user_state['images'][user_state['current_category']]):
                        user_state['current_index'] = len(user_state['images'][user_state['current_category']]) - 1
                    await send_current_image(event)
                else:
                    await event.edit(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ–º–æ–≤.", buttons=[
                        [Button.inline("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", data="menu")]
                    ])
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
                await event.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {str(e)[:50]}...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_state['images'] = await load_images()
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot.start(bot_token=BOT_TOKEN)
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{(await bot.get_me()).username}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ—Ä–≤—É—Ç
        await bot.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        
    finally:
        await bot.disconnect()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
    asyncio.run(main()) 